# -*- coding: utf-8 -*-
"""recommendation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aaG4VKWurZglXu7g7FEeqe4qTOOgEre8
"""

dataset = {
    'Alice': {
        'Finding Nemo': 4.0, 'The Incredibles': 5.0, 'Toy Story': 3.5,
        'Coco': 4.5, 'Up': 4.0
    },
    'Bob': {
        'Finding Nemo': 4.5, 'Up': 5.0, 'The Incredibles': 4.0,
        'Inside Out': 3.0, 'Toy Story': 4.0
    },
    'Charlie': {
        'The Incredibles': 5.0, 'Toy Story': 4.0, 'Coco': 5.0,
        'Inside Out': 3.5, 'Zootopia': 4.5
    },
    'David': {
        'Finding Nemo': 3.5, 'Up': 4.0, 'The Incredibles': 3.0,
        'Inside Out': 4.0, 'Moana': 5.0
    },
    'Emily': {
        'Toy Story': 4.5, 'Coco': 4.0, 'Moana': 4.5
    },
    'Frank': {
        'Finding Nemo': 5.0, 'Inside Out': 4.5, 'Zootopia': 4.0
    }
}

from math import sqrt

def euclidean_distance(user1, user2):
    common_movies = {}
    for movie in dataset[user1]:
        if movie in dataset[user2]:
            common_movies[movie] = 1
    if len(common_movies) == 0:
        return 0
    sum_of_squares = sum(
        pow(dataset[user1][movie] - dataset[user2][movie], 2)
        for movie in common_movies
    )
    return 1 / (1 + sqrt(sum_of_squares))

def get_recommendations(user, num_recommendations=3):
    if user not in dataset:
        print(f"User '{user}' not found in the dataset.")
        return []
    total_similarities = {}
    for other_user in dataset:
        if other_user != user:
            similarity = euclidean_distance(user, other_user)
            total_similarities[other_user] = similarity
    sorted_similarities = sorted(total_similarities.items(), key=lambda x: x[1], reverse=True)
    recommendation_scores = {}
    for similar_user, similarity in sorted_similarities:
        if similarity <= 0:
            continue
        for movie in dataset[similar_user]:
            if movie not in dataset[user]:
                if movie not in recommendation_scores:
                    recommendation_scores[movie] = 0.0
                recommendation_scores[movie] += dataset[similar_user][movie] * similarity
    sorted_recommendations = sorted(recommendation_scores.items(), key=lambda x: x[1], reverse=True)
    return [movie for movie, score in sorted_recommendations[:num_recommendations]]

if __name__ == '__main__':
    target_user = 'Alice'
    print(f"Generating recommendations for {target_user}...")
    recommendations = get_recommendations(target_user)
    if recommendations:
        print("\nTop recommendations for you:")
        for i, movie in enumerate(recommendations, 1):
            print(f"{i}. {movie}")
    else:
        print("Sorry, no recommendations could be generated at this time.")

    print("\n--- Example with a different user ---")
    target_user_2 = 'Emily'
    print(f"Generating recommendations for {target_user_2}...")
    recommendations_2 = get_recommendations(target_user_2)
    if recommendations_2:
        print("\nTop recommendations for you:")
        for i, movie in enumerate(recommendations_2, 1):
            print(f"{i}. {movie}")
    else:
        print("Sorry, no recommendations could be generated at this time.")