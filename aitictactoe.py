# -*- coding: utf-8 -*-
"""AItictactoe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bw0K65JSuwoDXZnpA6ix8UW3pxSW4jNY
"""

board = [' ' for _ in range(9)]
human_player = 'X'
ai_player = 'O'

def print_board(board):
    print('-------------')
    for i in range(3):
        print(f'| {board[i*3]} | {board[i*3+1]} | {board[i*3+2]} |')
        print('-------------')

def check_win(current_board, player):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
    ]
    return any(all(current_board[i] == player for i in combo) for combo in winning_combinations)

def is_draw(current_board):
    return ' ' not in current_board

def minimax(current_board, is_maximizing, alpha, beta):
    if check_win(current_board, ai_player):
        return 1
    elif check_win(current_board, human_player):
        return -1
    elif is_draw(current_board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if current_board[i] == ' ':
                current_board[i] = ai_player
                score = minimax(current_board, False, alpha, beta)
                current_board[i] = ' '
                best_score = max(best_score, score)
                alpha = max(alpha, best_score)
                if beta <= alpha:
                    break
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if current_board[i] == ' ':
                current_board[i] = human_player
                score = minimax(current_board, True, alpha, beta)
                current_board[i] = ' '
                best_score = min(best_score, score)
                beta = min(beta, best_score)
                if beta <= alpha:
                    break
        return best_score

def find_best_move(current_board):
    best_score = -float('inf')
    best_move = -1
    alpha = -float('inf')
    beta = float('inf')

    for i in range(9):
        if current_board[i] == ' ':
            current_board[i] = ai_player
            score = minimax(current_board, False, alpha, beta)
            current_board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
            alpha = max(alpha, best_score)
    return best_move

def main():
    print("Welcome to Unbeatable Tic-Tac-Toe!")
    print("You are 'X', the AI is 'O'.")
    print_board(board)

    while True:
        try:
            move = int(input("Enter your move (1-9): ")) - 1
            if 0 <= move <= 8 and board[move] == ' ':
                board[move] = human_player
            else:
                print("Invalid move. Please try again.")
                continue
        except ValueError:
            print("Invalid input. Please enter a number.")
            continue

        if check_win(board, human_player):
            print_board(board)
            print("You win! (Though it's impossible against this AI.)")
            break
        if is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        print("AI is making its move...")
        ai_move = find_best_move(board)
        board[ai_move] = ai_player
        print_board(board)

        if check_win(board, ai_player):
            print_board(board)
            print("AI wins! You can't beat me!")
            break
        if is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

if __name__ == "__main__":
    main()